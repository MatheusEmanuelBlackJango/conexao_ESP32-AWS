#include <pgmspace.h>
#include <stdio.h> // necessaria para o printf
#include <stdlib.h>  // necessário p/ as funções rand() e srand()
#include<time.h> // necessária para função time

#define SECRET
#define THINGNAME "esp32-thing"                                       //change this

const char WIFI_SSID[] = "3A BEBIDAS";                                        //change this
const char WIFI_PASSWORD[] = "Pirulitoquebatebate";                                    //change this
const char AWS_IOT_ENDPOINT[] = "a35uciom4jmkj-ats.iot.us-east-1.amazonaws.com";        //change this

// Amazon Root CA 1
static const char AWS_CERT_CA[] PROGMEM = R"EOF(
-----BEGIN CERTIFICATE-----
MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF
ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6
b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL
MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv
b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj
ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM
9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw
IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6
VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L
93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm
jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC
AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA
A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI
U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs
N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv
o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU
5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy
rqXRfboQnoZsG4q5WTP468SQvvG5
-----END CERTIFICATE-----
)EOF";

// Device Certificate                                               //change this
static const char AWS_CERT_CRT[] PROGMEM = R"KEY(
-----BEGIN CERTIFICATE-----
MIIDWTCCAkGgAwIBAgIUJ7uGhn4wHWeeQ8EQudACmvKeDoEwDQYJKoZIhvcNAQEL
BQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g
SW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIxMDYyNTAxMDk1
M1oXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0
ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPppKduDu/eAw3A5OEjY
VQKbbPzULjXUzBYgLTmzjh3QZ9knP+GSn/TbEJ6zIZkuWP0GrVvef0qLgLsMeWMo
1khp9v9mYlJFh+RJK5cffL46uOR27CSZDqDpbYyNWaMFxin01c3vIRcbh5qI5Mw9
MEkqGVxOWO/l7hayn9XxT6deGfihjsEqjOWjInEM7ascIkUp6/bjOIQMJXVS3kXa
4zucGOIHslJgOUOrJ+ny8YzQ55rA0ASW1vZ/dwjzMYS/Wx5xRnKQgIdZCbK0BjrO
8j+dJezGaFMQBgvZbzDItpn9k8nnJ1Hibo/tJqU5HmNnQWol5oXWD2sMyBAj+6g9
X0MCAwEAAaNgMF4wHwYDVR0jBBgwFoAUCbXaiu0VpUvOIeRMB1dp3kqlwvswHQYD
VR0OBBYEFEGGzlfDzuylc1aZ1Tp00APpzhe5MAwGA1UdEwEB/wQCMAAwDgYDVR0P
AQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQAi02bC2gJnCj6bUBUfzO7Z1lFL
UGzBJKSTFF2nyq3p9gDeHORTgfXYrgmjFeHLWEPAg9hDETr73dAZyFZ55+/jRkZJ
qTeO/qFJ7DUuvNPiy0UK89jdGEKS5begMP5OTPAqBjf7kut/3q+PIHQTCCsUcBdp
It5KPd9PYmv/gkw7RqVdD+nCIcAGZJrFAtKOj027LN7r7BiidShVDpY13P1bFWjF
P7EIAmlWVJWdjyeYtz5aJC2fHLUbxcIorPHCXqNilPQkPS+V4IHKwIA398HqDJf1
ICGb+yKOu7F8Bd5yYo3mH6ZMozaeQRQ3V7ViFu/N8mMiog4AM/OBqeaw4hXO
-----END CERTIFICATE-----

)KEY";

// Device Private Key                                               //change this
static const char AWS_CERT_PRIVATE[] PROGMEM = R"KEY(
-----BEGIN RSA PRIVATE KEY-----
MIIEpgIBAAKCAQEA+mkp24O794DDcDk4SNhVApts/NQuNdTMFiAtObOOHdBn2Sc/
4ZKf9NsQnrMhmS5Y/QatW95/SouAuwx5YyjWSGn2/2ZiUkWH5Ekrlx98vjq45Hbs
JJkOoOltjI1ZowXGKfTVze8hFxuHmojkzD0wSSoZXE5Y7+XuFrKf1fFPp14Z+KGO
wSqM5aMicQztqxwiRSnr9uM4hAwldVLeRdrjO5wY4geyUmA5Q6sn6fLxjNDnmsDQ
BJbW9n93CPMxhL9bHnFGcpCAh1kJsrQGOs7yP50l7MZoUxAGC9lvMMi2mf2Tyecn
UeJuj+0mpTkeY2dBaiXmhdYPawzIECP7qD1fQwIDAQABAoIBAQC9vBscGbe9tBHh
oWl1QH1BKXUuKLMO1LsCdMTvuI4RJwzYq/WqPEf45le0d7QYdda1eW63cmHuoL8c
ezoqmRGr8qZVJEWRYt+xaIOf0RrapHHdogIRROuhnt0Dp0Jo1IIu3jV2AR+Ie7KG
s/zwh9hjR4PJvg+DTivVhOi42UvqWlIQ+i9uvmrSlLApgN+RuElcubgtu2OmeD+N
GkBbbYelDqoQfkvshjdvyYqUcY5s736gJ+6bwQ1KMZX8/HyQlANcr0Vz478iGC8D
yzi/Bj3AhF/3f2Q14kcm3Kta4yIXvQFTMSLsQSwnaYxkW62HBkRUbzkvGqXAGPYZ
4/59XuvpAoGBAP4IqBpiYADlEZO2P3v5BrCgkasiApLznUOPczGGCenD30cBGxxi
9lleIuTnMBK1b7guizQ6SwtMBQy4FGOrV1RQvxL7blhvkSgpCA/oLDAItYkE11xu
5l7+5meb8rMr1xx75AqIXy17+fYVwgiMYAazYWt6JxpntTRdi7ShSgvPAoGBAPxZ
VARLAXQp8BEo0q/PQOnds0c2KViB9mlmV1/3h+rcCz9vOdI7uPqOE6aQ7hatMucS
95c5ZAvSvLEV98N3S/ismGsYmTRGnZs/6FQo1LsTVlO56kYqhUdXKrohJFQjYFcA
DOLtLVKNNfp8e5YnRHUyrIKaChbYCIn8VjGqpY5NAoGBAL/ZHcs/PC2w0YNygaNI
wGqn+Rr7BmKgpMYfEen2xonKqVbgWO8pNc7sLwIcLswSRhsc23hIBeC0OqQOaSeU
gNFmYcceJ4mWSFPCGRqaRrTH/wFJrLNb9ZMMgkkBF1uE4mHalq/1qZuaI35blDwM
d4DX+9zFVb61T74KX7W8kUU1AoGBAIyuYCBkkFLqbmOilpJcwJugdSnmD/a/vVfV
LjDaFnPgaITcxSdnFCDaxCm/8nvB4vbfpBgybowI2BkBXjcicsAXuIE8HWz/US4T
2rnQaYhBp4bVxr2HRvYWqkNJ5q7hafwWkxiPkQzMnKMgcuWqzodn0LSem7FQjrIe
cw8NS26hAoGBAJncML7K/67q0difhIFxH5f4uqaJTSN8KSDUEUvg//5rojYAfG20
KDndCVtLYZnTQNASBWe/cducfp2plQ88ECcKAAZwsVXW01MNV3n4uzkQCvqcS9vm
diosKIBHDQ91e14Fqxnuywe7Z/JISGksdn0a9JZUqfbcI0XyJGXAS3rJ
-----END RSA PRIVATE KEY-----

)KEY";

#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include "WiFi.h"


#define AWS_IOT_PUBLISH_TOPIC   "esp32/pub"
#define AWS_IOT_SUBSCRIBE_TOPIC "esp32/sub"

WiFiClientSecure net = WiFiClientSecure();
PubSubClient client(net);

void connectAWS()
{
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.println("Connecting to Wi-Fi");

  while (WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }

  // Configure WiFiClientSecure to use the AWS IoT device credentials
  net.setCACert(AWS_CERT_CA);
  net.setCertificate(AWS_CERT_CRT);
  net.setPrivateKey(AWS_CERT_PRIVATE);

  // Connect to the MQTT broker on the AWS endpoint we defined earlier
  client.setServer(AWS_IOT_ENDPOINT, 8883);

  // Create a message handler
  client.setCallback(messageHandler);

  Serial.print("Connecting to AWS IOT");

  while (!client.connect(THINGNAME)) {
    Serial.print(".");
    delay(100);
  }

  if(!client.connected()){
    Serial.println("AWS IoT Timeout!");
    return;
  }

  // Subscribe to a topic
  client.subscribe(AWS_IOT_SUBSCRIBE_TOPIC);

  Serial.println("AWS IoT Connected!");
}

void publishMessage()
{
  StaticJsonDocument<200> doc;
  int i, x;
  char jsonBuffer[512];
  srand(time(NULL)); // função para os numeros aleatórios serem diferentes
  doc[x] = rand() % 10; // gerando numero aleatorio e adicionando ao documento json
  for (i=0; i < 1; i++) {
  serializeJson(doc, jsonBuffer); // print to client     // laço for definindo parametros do rand e imprimindo os numeros aleatorios
  }
  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
}


//void publishMessage()
//{
//  
//  int x[] ={43, 43, 54};
// // doc["chave aleatoria"] = "texto aleatorio";
//  Serial.println(x);
//  client.publish(AWS_IOT_PUBLISH_TOPIC);
//  }

//void publishMessage()
//{
//  StaticJsonDocument<200> doc;
//  doc["time"] = millis();
//  char jsonBuffer[512];
//  serializeJson(doc, jsonBuffer); // print to client
//
//  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
//}

void messageHandler(char* topic, byte* payload, unsigned int length) {
  Serial.print("incoming: ");
  Serial.println(topic);

  StaticJsonDocument<200> doc;
  deserializeJson(doc, payload);
  const char* message = doc["message"];
  Serial.println(message);
}

void setup() {
  Serial.begin(9600);
  connectAWS();
}

void loop() {
//  publishMessage2();
  publishMessage();
  client.loop();
  delay(1000);
}
